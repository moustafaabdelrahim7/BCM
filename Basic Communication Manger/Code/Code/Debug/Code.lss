
Code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000cbe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  00000cbe  00000d52  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001a0  00800082  00800082  00000d74  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d74  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000da4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000220  00000000  00000000  00000de0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002848  00000000  00000000  00001000  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d8c  00000000  00000000  00003848  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012b2  00000000  00000000  000045d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000048c  00000000  00000000  00005888  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000ce4  00000000  00000000  00005d14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000016ff  00000000  00000000  000069f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000198  00000000  00000000  000080f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 0d 05 	jmp	0xa1a	; 0xa1a <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 e4 04 	jmp	0x9c8	; 0x9c8 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee eb       	ldi	r30, 0xBE	; 190
  68:	fc e0       	ldi	r31, 0x0C	; 12
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 38       	cpi	r26, 0x82	; 130
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	22 e0       	ldi	r18, 0x02	; 2
  78:	a2 e8       	ldi	r26, 0x82	; 130
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 32       	cpi	r26, 0x22	; 34
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 3e 01 	call	0x27c	; 0x27c <main>
  8a:	0c 94 5d 06 	jmp	0xcba	; 0xcba <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Func_after_Send>:
}


void Func_after_Send(void)
{
	LED_ON(pina0);
  92:	80 e0       	ldi	r24, 0x00	; 0
  94:	0e 94 35 01 	call	0x26a	; 0x26a <LED_ON>
  98:	08 95       	ret

0000009a <Func_after_Receive>:

}

void Func_after_Receive(void)
{
	LED_ON(pina1);
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	0e 94 35 01 	call	0x26a	; 0x26a <LED_ON>
  a0:	08 95       	ret

000000a2 <APP_Init>:
ï»¿#include "app.h"
#include <util/delay.h>
#define  F_CPU 8000000ul
void APP_Init(void)
{
	sei();
  a2:	78 94       	sei
	bcm_init(ID_1_);
  a4:	80 e0       	ldi	r24, 0x00	; 0
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	0e 94 df 05 	call	0xbbe	; 0xbbe <bcm_init>
	LCD_INIT();
  ac:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <LCD_INIT>
	LED_INIT(pina0);
  b0:	80 e0       	ldi	r24, 0x00	; 0
  b2:	0e 94 2c 01 	call	0x258	; 0x258 <LED_INIT>
	LED_INIT(pina1);
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	0e 94 2c 01 	call	0x258	; 0x258 <LED_INIT>
	LED_INIT(pina2);
  bc:	82 e0       	ldi	r24, 0x02	; 2
  be:	0e 94 2c 01 	call	0x258	; 0x258 <LED_INIT>
	LED_INIT(pina3);
  c2:	83 e0       	ldi	r24, 0x03	; 3
  c4:	0e 94 2c 01 	call	0x258	; 0x258 <LED_INIT>
  c8:	08 95       	ret

000000ca <APP_Start>:
}

void APP_Start(void)
{
	BCM_SetCallBack(BCM_Rece_t,Func_after_Receive);
  ca:	6d e4       	ldi	r22, 0x4D	; 77
  cc:	70 e0       	ldi	r23, 0x00	; 0
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	0e 94 4f 06 	call	0xc9e	; 0xc9e <BCM_SetCallBack>
	
	BCM_SetCallBack(BCM_Send_t,Func_after_Send);
  d4:	69 e4       	ldi	r22, 0x49	; 73
  d6:	70 e0       	ldi	r23, 0x00	; 0
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	0e 94 4f 06 	call	0xc9e	; 0xc9e <BCM_SetCallBack>
	
	bcm_send_n("BCM Operating");
  de:	83 e7       	ldi	r24, 0x73	; 115
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <bcm_send_n>

	bcm_receive(str);
  e6:	82 e8       	ldi	r24, 0x82	; 130
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	0e 94 1c 06 	call	0xc38	; 0xc38 <bcm_receive>
  ee:	08 95       	ret

000000f0 <LCD_WRITE_COMMAND>:
	DIO_WRITEPIN(D7,read_bit(a_DATA,3));
	DIO_WRITEPIN(EN,HIGH);
	_delay_ms(1);
	DIO_WRITEPIN(EN,LOW);
	_delay_ms(1);
}
  f0:	cf 93       	push	r28
  f2:	c8 2f       	mov	r28, r24
  f4:	60 e0       	ldi	r22, 0x00	; 0
  f6:	81 e1       	ldi	r24, 0x11	; 17
  f8:	0e 94 45 02 	call	0x48a	; 0x48a <DIO_WRITEPIN>
  fc:	60 e0       	ldi	r22, 0x00	; 0
  fe:	82 e1       	ldi	r24, 0x12	; 18
 100:	0e 94 45 02 	call	0x48a	; 0x48a <DIO_WRITEPIN>
 104:	c4 fb       	bst	r28, 4
 106:	66 27       	eor	r22, r22
 108:	60 f9       	bld	r22, 0
 10a:	84 e1       	ldi	r24, 0x14	; 20
 10c:	0e 94 45 02 	call	0x48a	; 0x48a <DIO_WRITEPIN>
 110:	c5 fb       	bst	r28, 5
 112:	66 27       	eor	r22, r22
 114:	60 f9       	bld	r22, 0
 116:	85 e1       	ldi	r24, 0x15	; 21
 118:	0e 94 45 02 	call	0x48a	; 0x48a <DIO_WRITEPIN>
 11c:	c6 fb       	bst	r28, 6
 11e:	66 27       	eor	r22, r22
 120:	60 f9       	bld	r22, 0
 122:	86 e1       	ldi	r24, 0x16	; 22
 124:	0e 94 45 02 	call	0x48a	; 0x48a <DIO_WRITEPIN>
 128:	6c 2f       	mov	r22, r28
 12a:	66 1f       	adc	r22, r22
 12c:	66 27       	eor	r22, r22
 12e:	66 1f       	adc	r22, r22
 130:	87 e1       	ldi	r24, 0x17	; 23
 132:	0e 94 45 02 	call	0x48a	; 0x48a <DIO_WRITEPIN>
 136:	61 e0       	ldi	r22, 0x01	; 1
 138:	83 e1       	ldi	r24, 0x13	; 19
 13a:	0e 94 45 02 	call	0x48a	; 0x48a <DIO_WRITEPIN>
 13e:	89 ef       	ldi	r24, 0xF9	; 249
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	01 97       	sbiw	r24, 0x01	; 1
 144:	f1 f7       	brne	.-4      	; 0x142 <LCD_WRITE_COMMAND+0x52>
 146:	00 c0       	rjmp	.+0      	; 0x148 <LCD_WRITE_COMMAND+0x58>
 148:	00 00       	nop
 14a:	60 e0       	ldi	r22, 0x00	; 0
 14c:	83 e1       	ldi	r24, 0x13	; 19
 14e:	0e 94 45 02 	call	0x48a	; 0x48a <DIO_WRITEPIN>
 152:	89 ef       	ldi	r24, 0xF9	; 249
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <LCD_WRITE_COMMAND+0x66>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <LCD_WRITE_COMMAND+0x6c>
 15c:	00 00       	nop
 15e:	6c 2f       	mov	r22, r28
 160:	61 70       	andi	r22, 0x01	; 1
 162:	84 e1       	ldi	r24, 0x14	; 20
 164:	0e 94 45 02 	call	0x48a	; 0x48a <DIO_WRITEPIN>
 168:	c1 fb       	bst	r28, 1
 16a:	66 27       	eor	r22, r22
 16c:	60 f9       	bld	r22, 0
 16e:	85 e1       	ldi	r24, 0x15	; 21
 170:	0e 94 45 02 	call	0x48a	; 0x48a <DIO_WRITEPIN>
 174:	c2 fb       	bst	r28, 2
 176:	66 27       	eor	r22, r22
 178:	60 f9       	bld	r22, 0
 17a:	86 e1       	ldi	r24, 0x16	; 22
 17c:	0e 94 45 02 	call	0x48a	; 0x48a <DIO_WRITEPIN>
 180:	c3 fb       	bst	r28, 3
 182:	66 27       	eor	r22, r22
 184:	60 f9       	bld	r22, 0
 186:	87 e1       	ldi	r24, 0x17	; 23
 188:	0e 94 45 02 	call	0x48a	; 0x48a <DIO_WRITEPIN>
 18c:	61 e0       	ldi	r22, 0x01	; 1
 18e:	83 e1       	ldi	r24, 0x13	; 19
 190:	0e 94 45 02 	call	0x48a	; 0x48a <DIO_WRITEPIN>
 194:	89 ef       	ldi	r24, 0xF9	; 249
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <LCD_WRITE_COMMAND+0xa8>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <LCD_WRITE_COMMAND+0xae>
 19e:	00 00       	nop
 1a0:	60 e0       	ldi	r22, 0x00	; 0
 1a2:	83 e1       	ldi	r24, 0x13	; 19
 1a4:	0e 94 45 02 	call	0x48a	; 0x48a <DIO_WRITEPIN>
 1a8:	89 ef       	ldi	r24, 0xF9	; 249
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <LCD_WRITE_COMMAND+0xbc>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <LCD_WRITE_COMMAND+0xc2>
 1b2:	00 00       	nop
 1b4:	cf 91       	pop	r28
 1b6:	08 95       	ret

000001b8 <LCD_INIT>:
/*************************************************************************************************************************/

void LCD_INIT(void)
{
	
	DIO_INITPIN(pinc4,OUTPUT);
 1b8:	60 e0       	ldi	r22, 0x00	; 0
 1ba:	84 e1       	ldi	r24, 0x14	; 20
 1bc:	0e 94 43 01 	call	0x286	; 0x286 <DIO_INITPIN>
	DIO_INITPIN(pinc5,OUTPUT);
 1c0:	60 e0       	ldi	r22, 0x00	; 0
 1c2:	85 e1       	ldi	r24, 0x15	; 21
 1c4:	0e 94 43 01 	call	0x286	; 0x286 <DIO_INITPIN>
	DIO_INITPIN(pinc6,OUTPUT);
 1c8:	60 e0       	ldi	r22, 0x00	; 0
 1ca:	86 e1       	ldi	r24, 0x16	; 22
 1cc:	0e 94 43 01 	call	0x286	; 0x286 <DIO_INITPIN>
	DIO_INITPIN(pinc7,OUTPUT);
 1d0:	60 e0       	ldi	r22, 0x00	; 0
 1d2:	87 e1       	ldi	r24, 0x17	; 23
 1d4:	0e 94 43 01 	call	0x286	; 0x286 <DIO_INITPIN>
	DIO_INITPIN(RS,OUTPUT);
 1d8:	60 e0       	ldi	r22, 0x00	; 0
 1da:	81 e1       	ldi	r24, 0x11	; 17
 1dc:	0e 94 43 01 	call	0x286	; 0x286 <DIO_INITPIN>
	DIO_INITPIN(RW,OUTPUT);
 1e0:	60 e0       	ldi	r22, 0x00	; 0
 1e2:	82 e1       	ldi	r24, 0x12	; 18
 1e4:	0e 94 43 01 	call	0x286	; 0x286 <DIO_INITPIN>
	DIO_INITPIN(EN,OUTPUT);
 1e8:	60 e0       	ldi	r22, 0x00	; 0
 1ea:	83 e1       	ldi	r24, 0x13	; 19
 1ec:	0e 94 43 01 	call	0x286	; 0x286 <DIO_INITPIN>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1f0:	83 ed       	ldi	r24, 0xD3	; 211
 1f2:	90 e3       	ldi	r25, 0x30	; 48
 1f4:	01 97       	sbiw	r24, 0x01	; 1
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <LCD_INIT+0x3c>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <LCD_INIT+0x42>
 1fa:	00 00       	nop
	
	
	_delay_ms(50);
	LCD_WRITE_COMMAND(0x02);
 1fc:	82 e0       	ldi	r24, 0x02	; 2
 1fe:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_WRITE_COMMAND>
 202:	89 ef       	ldi	r24, 0xF9	; 249
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	01 97       	sbiw	r24, 0x01	; 1
 208:	f1 f7       	brne	.-4      	; 0x206 <LCD_INIT+0x4e>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <LCD_INIT+0x54>
 20c:	00 00       	nop
	_delay_ms(1);
	LCD_WRITE_COMMAND(0X28);                     /* THIS IS FOR FUNCTION SET IN THE DATA SHEET  4BIT MODE, 2LINE, 5*7*/
 20e:	88 e2       	ldi	r24, 0x28	; 40
 210:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_WRITE_COMMAND>
 214:	89 ef       	ldi	r24, 0xF9	; 249
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	01 97       	sbiw	r24, 0x01	; 1
 21a:	f1 f7       	brne	.-4      	; 0x218 <LCD_INIT+0x60>
 21c:	00 c0       	rjmp	.+0      	; 0x21e <LCD_INIT+0x66>
 21e:	00 00       	nop
	_delay_ms(1);
	LCD_WRITE_COMMAND(0x0c);                     /*SCREEN ON, CURSOR OFF*/
 220:	8c e0       	ldi	r24, 0x0C	; 12
 222:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_WRITE_COMMAND>
 226:	89 ef       	ldi	r24, 0xF9	; 249
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	01 97       	sbiw	r24, 0x01	; 1
 22c:	f1 f7       	brne	.-4      	; 0x22a <LCD_INIT+0x72>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <LCD_INIT+0x78>
 230:	00 00       	nop
	_delay_ms(1);
	LCD_WRITE_COMMAND(0X01);                      /*CLEAR SCREEN*/
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_WRITE_COMMAND>
 238:	83 ef       	ldi	r24, 0xF3	; 243
 23a:	91 e0       	ldi	r25, 0x01	; 1
 23c:	01 97       	sbiw	r24, 0x01	; 1
 23e:	f1 f7       	brne	.-4      	; 0x23c <LCD_INIT+0x84>
 240:	00 c0       	rjmp	.+0      	; 0x242 <LCD_INIT+0x8a>
 242:	00 00       	nop
	_delay_ms(2);
	LCD_WRITE_COMMAND(0X06);
 244:	86 e0       	ldi	r24, 0x06	; 6
 246:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_WRITE_COMMAND>
 24a:	89 ef       	ldi	r24, 0xF9	; 249
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	01 97       	sbiw	r24, 0x01	; 1
 250:	f1 f7       	brne	.-4      	; 0x24e <LCD_INIT+0x96>
 252:	00 c0       	rjmp	.+0      	; 0x254 <LCD_INIT+0x9c>
 254:	00 00       	nop
 256:	08 95       	ret

00000258 <LED_INIT>:
{
	DIO_PIN_TYPE PIN_NUM;
	DIO_PORT_TYPE PORT;
	PORT=PIN/8;
	PIN_NUM=PIN%8;
	if(PORT>4)
 258:	88 32       	cpi	r24, 0x28	; 40
 25a:	28 f4       	brcc	.+10     	; 0x266 <LED_INIT+0xe>
	{
		return INVLAID_LED_PIN_NUMBER;
	}
	else
	{
		DIO_INITPIN(PIN,OUTPUT);
 25c:	60 e0       	ldi	r22, 0x00	; 0
 25e:	0e 94 43 01 	call	0x286	; 0x286 <DIO_INITPIN>
		return VALID_LED;
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	08 95       	ret
	DIO_PORT_TYPE PORT;
	PORT=PIN/8;
	PIN_NUM=PIN%8;
	if(PORT>4)
	{
		return INVALID_LED_PORT;
 266:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		DIO_INITPIN(PIN,OUTPUT);
		return VALID_LED;
	}
}
 268:	08 95       	ret

0000026a <LED_ON>:
{
	DIO_PIN_TYPE PIN_NUM;
	DIO_PORT_TYPE PORT;
	PORT=PIN/8;
	PIN_NUM=PIN%8;
	if(PORT>4)
 26a:	88 32       	cpi	r24, 0x28	; 40
 26c:	28 f4       	brcc	.+10     	; 0x278 <LED_ON+0xe>
	{
		return INVLAID_LED_PIN_NUMBER;
	}
	else
	{
		DIO_WRITEPIN(PIN,HIGH);
 26e:	61 e0       	ldi	r22, 0x01	; 1
 270:	0e 94 45 02 	call	0x48a	; 0x48a <DIO_WRITEPIN>
		return VALID_LED;
 274:	80 e0       	ldi	r24, 0x00	; 0
 276:	08 95       	ret
	DIO_PORT_TYPE PORT;
	PORT=PIN/8;
	PIN_NUM=PIN%8;
	if(PORT>4)
	{
		return INVALID_LED_PORT;
 278:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		DIO_WRITEPIN(PIN,HIGH);
		return VALID_LED;
	}
}
 27a:	08 95       	ret

0000027c <main>:
#include "APP/app.h"
/*Send*/

int main(void)
{
	APP_Init();	
 27c:	0e 94 51 00 	call	0xa2	; 0xa2 <APP_Init>
	APP_Start();
 280:	0e 94 65 00 	call	0xca	; 0xca <APP_Start>
 284:	ff cf       	rjmp	.-2      	; 0x284 <main+0x8>

00000286 <DIO_INITPIN>:
   */
DIO_ERROR_TYPE DIO_INITPIN(DIO_PIN_TYPE PIN,DIO_PINSTATUS_TYPE STATUS)
{
	DIO_PIN_TYPE PIN_NUM;
	DIO_PORT_TYPE PORT;
	PORT=PIN/8;                                  //to determine which port i'm using
 286:	98 2f       	mov	r25, r24
 288:	96 95       	lsr	r25
 28a:	96 95       	lsr	r25
 28c:	96 95       	lsr	r25
	PIN_NUM=PIN%8;                               //to determine which pin in the port i'm using 
	DIO_ERROR_TYPE error=VALID_DIO;
	if(PORT>4)
 28e:	95 30       	cpi	r25, 0x05	; 5
 290:	08 f0       	brcs	.+2      	; 0x294 <DIO_INITPIN+0xe>
 292:	f9 c0       	rjmp	.+498    	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
DIO_ERROR_TYPE DIO_INITPIN(DIO_PIN_TYPE PIN,DIO_PINSTATUS_TYPE STATUS)
{
	DIO_PIN_TYPE PIN_NUM;
	DIO_PORT_TYPE PORT;
	PORT=PIN/8;                                  //to determine which port i'm using
	PIN_NUM=PIN%8;                               //to determine which pin in the port i'm using 
 294:	87 70       	andi	r24, 0x07	; 7
	{
		return INVALID_PIN_NUMBER;
	}
	else
	 {
	switch(STATUS)
 296:	61 30       	cpi	r22, 0x01	; 1
 298:	31 f0       	breq	.+12     	; 0x2a6 <DIO_INITPIN+0x20>
 29a:	08 f4       	brcc	.+2      	; 0x29e <DIO_INITPIN+0x18>
 29c:	a4 c0       	rjmp	.+328    	; 0x3e6 <DIO_INITPIN+0x160>
 29e:	62 30       	cpi	r22, 0x02	; 2
 2a0:	09 f4       	brne	.+2      	; 0x2a4 <DIO_INITPIN+0x1e>
 2a2:	51 c0       	rjmp	.+162    	; 0x346 <DIO_INITPIN+0xc0>
 2a4:	ef c0       	rjmp	.+478    	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
	{
		case INFREE:
		switch(PORT)
 2a6:	91 30       	cpi	r25, 0x01	; 1
 2a8:	c1 f0       	breq	.+48     	; 0x2da <DIO_INITPIN+0x54>
 2aa:	28 f0       	brcs	.+10     	; 0x2b6 <DIO_INITPIN+0x30>
 2ac:	92 30       	cpi	r25, 0x02	; 2
 2ae:	39 f1       	breq	.+78     	; 0x2fe <DIO_INITPIN+0x78>
 2b0:	93 30       	cpi	r25, 0x03	; 3
 2b2:	b9 f1       	breq	.+110    	; 0x322 <DIO_INITPIN+0x9c>
 2b4:	e7 c0       	rjmp	.+462    	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
		{
			case PA:
			clear_bit(DDRA,PIN_NUM);
 2b6:	4a b3       	in	r20, 0x1a	; 26
 2b8:	21 e0       	ldi	r18, 0x01	; 1
 2ba:	30 e0       	ldi	r19, 0x00	; 0
 2bc:	b9 01       	movw	r22, r18
 2be:	02 c0       	rjmp	.+4      	; 0x2c4 <DIO_INITPIN+0x3e>
 2c0:	66 0f       	add	r22, r22
 2c2:	77 1f       	adc	r23, r23
 2c4:	8a 95       	dec	r24
 2c6:	e2 f7       	brpl	.-8      	; 0x2c0 <DIO_INITPIN+0x3a>
 2c8:	cb 01       	movw	r24, r22
 2ca:	80 95       	com	r24
 2cc:	94 2f       	mov	r25, r20
 2ce:	98 23       	and	r25, r24
 2d0:	9a bb       	out	0x1a, r25	; 26
			clear_bit(PORTA,PIN_NUM);       /*to make sure that the port register  is cleared in case of reuse*/
 2d2:	9b b3       	in	r25, 0x1b	; 27
 2d4:	89 23       	and	r24, r25
 2d6:	8b bb       	out	0x1b, r24	; 27
			break;
 2d8:	d5 c0       	rjmp	.+426    	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
			case PB:
			clear_bit(DDRB,PIN_NUM);
 2da:	47 b3       	in	r20, 0x17	; 23
 2dc:	21 e0       	ldi	r18, 0x01	; 1
 2de:	30 e0       	ldi	r19, 0x00	; 0
 2e0:	b9 01       	movw	r22, r18
 2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <DIO_INITPIN+0x62>
 2e4:	66 0f       	add	r22, r22
 2e6:	77 1f       	adc	r23, r23
 2e8:	8a 95       	dec	r24
 2ea:	e2 f7       	brpl	.-8      	; 0x2e4 <DIO_INITPIN+0x5e>
 2ec:	cb 01       	movw	r24, r22
 2ee:	80 95       	com	r24
 2f0:	94 2f       	mov	r25, r20
 2f2:	98 23       	and	r25, r24
 2f4:	97 bb       	out	0x17, r25	; 23
			clear_bit(PORTB,PIN_NUM);
 2f6:	98 b3       	in	r25, 0x18	; 24
 2f8:	89 23       	and	r24, r25
 2fa:	88 bb       	out	0x18, r24	; 24
			break;
 2fc:	c3 c0       	rjmp	.+390    	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>

			case PC:
			clear_bit(DDRC,PIN_NUM);
 2fe:	44 b3       	in	r20, 0x14	; 20
 300:	21 e0       	ldi	r18, 0x01	; 1
 302:	30 e0       	ldi	r19, 0x00	; 0
 304:	b9 01       	movw	r22, r18
 306:	02 c0       	rjmp	.+4      	; 0x30c <DIO_INITPIN+0x86>
 308:	66 0f       	add	r22, r22
 30a:	77 1f       	adc	r23, r23
 30c:	8a 95       	dec	r24
 30e:	e2 f7       	brpl	.-8      	; 0x308 <DIO_INITPIN+0x82>
 310:	cb 01       	movw	r24, r22
 312:	80 95       	com	r24
 314:	94 2f       	mov	r25, r20
 316:	98 23       	and	r25, r24
 318:	94 bb       	out	0x14, r25	; 20
			clear_bit(PORTC,PIN_NUM);
 31a:	95 b3       	in	r25, 0x15	; 21
 31c:	89 23       	and	r24, r25
 31e:	85 bb       	out	0x15, r24	; 21
			break;
 320:	b1 c0       	rjmp	.+354    	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>

			case PD:
			clear_bit(DDRD,PIN_NUM);
 322:	41 b3       	in	r20, 0x11	; 17
 324:	21 e0       	ldi	r18, 0x01	; 1
 326:	30 e0       	ldi	r19, 0x00	; 0
 328:	b9 01       	movw	r22, r18
 32a:	02 c0       	rjmp	.+4      	; 0x330 <DIO_INITPIN+0xaa>
 32c:	66 0f       	add	r22, r22
 32e:	77 1f       	adc	r23, r23
 330:	8a 95       	dec	r24
 332:	e2 f7       	brpl	.-8      	; 0x32c <DIO_INITPIN+0xa6>
 334:	cb 01       	movw	r24, r22
 336:	80 95       	com	r24
 338:	94 2f       	mov	r25, r20
 33a:	98 23       	and	r25, r24
 33c:	91 bb       	out	0x11, r25	; 17
			clear_bit(PORTD,PIN_NUM);
 33e:	92 b3       	in	r25, 0x12	; 18
 340:	89 23       	and	r24, r25
 342:	82 bb       	out	0x12, r24	; 18
			break;
 344:	9f c0       	rjmp	.+318    	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
		}
		break;
		
		case INPLUP:
		switch(PORT)
 346:	91 30       	cpi	r25, 0x01	; 1
 348:	c1 f0       	breq	.+48     	; 0x37a <DIO_INITPIN+0xf4>
 34a:	28 f0       	brcs	.+10     	; 0x356 <DIO_INITPIN+0xd0>
 34c:	92 30       	cpi	r25, 0x02	; 2
 34e:	39 f1       	breq	.+78     	; 0x39e <DIO_INITPIN+0x118>
 350:	93 30       	cpi	r25, 0x03	; 3
 352:	b9 f1       	breq	.+110    	; 0x3c2 <DIO_INITPIN+0x13c>
 354:	97 c0       	rjmp	.+302    	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
		{
			case PA:
			clear_bit(DDRA,PIN_NUM);
 356:	4a b3       	in	r20, 0x1a	; 26
 358:	21 e0       	ldi	r18, 0x01	; 1
 35a:	30 e0       	ldi	r19, 0x00	; 0
 35c:	b9 01       	movw	r22, r18
 35e:	02 c0       	rjmp	.+4      	; 0x364 <DIO_INITPIN+0xde>
 360:	66 0f       	add	r22, r22
 362:	77 1f       	adc	r23, r23
 364:	8a 95       	dec	r24
 366:	e2 f7       	brpl	.-8      	; 0x360 <DIO_INITPIN+0xda>
 368:	cb 01       	movw	r24, r22
 36a:	96 2f       	mov	r25, r22
 36c:	90 95       	com	r25
 36e:	94 23       	and	r25, r20
 370:	9a bb       	out	0x1a, r25	; 26
			set_bit(PORTA,PIN_NUM);
 372:	9b b3       	in	r25, 0x1b	; 27
 374:	89 2b       	or	r24, r25
 376:	8b bb       	out	0x1b, r24	; 27
			break;
 378:	85 c0       	rjmp	.+266    	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
			
			case PB:
			clear_bit(DDRB,PIN_NUM);
 37a:	47 b3       	in	r20, 0x17	; 23
 37c:	21 e0       	ldi	r18, 0x01	; 1
 37e:	30 e0       	ldi	r19, 0x00	; 0
 380:	b9 01       	movw	r22, r18
 382:	02 c0       	rjmp	.+4      	; 0x388 <DIO_INITPIN+0x102>
 384:	66 0f       	add	r22, r22
 386:	77 1f       	adc	r23, r23
 388:	8a 95       	dec	r24
 38a:	e2 f7       	brpl	.-8      	; 0x384 <DIO_INITPIN+0xfe>
 38c:	cb 01       	movw	r24, r22
 38e:	96 2f       	mov	r25, r22
 390:	90 95       	com	r25
 392:	94 23       	and	r25, r20
 394:	97 bb       	out	0x17, r25	; 23
			set_bit(PORTB,PIN_NUM);
 396:	98 b3       	in	r25, 0x18	; 24
 398:	89 2b       	or	r24, r25
 39a:	88 bb       	out	0x18, r24	; 24
			break;
 39c:	73 c0       	rjmp	.+230    	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>

			case PC:
			clear_bit(DDRC,PIN_NUM);
 39e:	44 b3       	in	r20, 0x14	; 20
 3a0:	21 e0       	ldi	r18, 0x01	; 1
 3a2:	30 e0       	ldi	r19, 0x00	; 0
 3a4:	b9 01       	movw	r22, r18
 3a6:	02 c0       	rjmp	.+4      	; 0x3ac <DIO_INITPIN+0x126>
 3a8:	66 0f       	add	r22, r22
 3aa:	77 1f       	adc	r23, r23
 3ac:	8a 95       	dec	r24
 3ae:	e2 f7       	brpl	.-8      	; 0x3a8 <DIO_INITPIN+0x122>
 3b0:	cb 01       	movw	r24, r22
 3b2:	96 2f       	mov	r25, r22
 3b4:	90 95       	com	r25
 3b6:	94 23       	and	r25, r20
 3b8:	94 bb       	out	0x14, r25	; 20
			set_bit(PORTC,PIN_NUM);
 3ba:	95 b3       	in	r25, 0x15	; 21
 3bc:	89 2b       	or	r24, r25
 3be:	85 bb       	out	0x15, r24	; 21
			break;
 3c0:	61 c0       	rjmp	.+194    	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>

			case PD:
			clear_bit(DDRD,PIN_NUM);
 3c2:	41 b3       	in	r20, 0x11	; 17
 3c4:	21 e0       	ldi	r18, 0x01	; 1
 3c6:	30 e0       	ldi	r19, 0x00	; 0
 3c8:	b9 01       	movw	r22, r18
 3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <DIO_INITPIN+0x14a>
 3cc:	66 0f       	add	r22, r22
 3ce:	77 1f       	adc	r23, r23
 3d0:	8a 95       	dec	r24
 3d2:	e2 f7       	brpl	.-8      	; 0x3cc <DIO_INITPIN+0x146>
 3d4:	cb 01       	movw	r24, r22
 3d6:	96 2f       	mov	r25, r22
 3d8:	90 95       	com	r25
 3da:	94 23       	and	r25, r20
 3dc:	91 bb       	out	0x11, r25	; 17
			set_bit(PORTD,PIN_NUM);
 3de:	92 b3       	in	r25, 0x12	; 18
 3e0:	89 2b       	or	r24, r25
 3e2:	82 bb       	out	0x12, r24	; 18
			break;
 3e4:	4f c0       	rjmp	.+158    	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
		}
		break;
		return VALID_DIO;
		
		case OUTPUT:
		switch(PORT)
 3e6:	91 30       	cpi	r25, 0x01	; 1
 3e8:	c1 f0       	breq	.+48     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 3ea:	28 f0       	brcs	.+10     	; 0x3f6 <DIO_INITPIN+0x170>
 3ec:	92 30       	cpi	r25, 0x02	; 2
 3ee:	39 f1       	breq	.+78     	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 3f0:	93 30       	cpi	r25, 0x03	; 3
 3f2:	b9 f1       	breq	.+110    	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 3f4:	47 c0       	rjmp	.+142    	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
		{
			case PA:
			clear_bit(PORTA,PIN_NUM);
 3f6:	4b b3       	in	r20, 0x1b	; 27
 3f8:	21 e0       	ldi	r18, 0x01	; 1
 3fa:	30 e0       	ldi	r19, 0x00	; 0
 3fc:	b9 01       	movw	r22, r18
 3fe:	02 c0       	rjmp	.+4      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 400:	66 0f       	add	r22, r22
 402:	77 1f       	adc	r23, r23
 404:	8a 95       	dec	r24
 406:	e2 f7       	brpl	.-8      	; 0x400 <__EEPROM_REGION_LENGTH__>
 408:	cb 01       	movw	r24, r22
 40a:	96 2f       	mov	r25, r22
 40c:	90 95       	com	r25
 40e:	94 23       	and	r25, r20
 410:	9b bb       	out	0x1b, r25	; 27
			set_bit(DDRA,PIN_NUM);
 412:	9a b3       	in	r25, 0x1a	; 26
 414:	89 2b       	or	r24, r25
 416:	8a bb       	out	0x1a, r24	; 26
			break;
 418:	35 c0       	rjmp	.+106    	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
			
			case PB:
			clear_bit(PORTB,PIN_NUM);
 41a:	48 b3       	in	r20, 0x18	; 24
 41c:	21 e0       	ldi	r18, 0x01	; 1
 41e:	30 e0       	ldi	r19, 0x00	; 0
 420:	b9 01       	movw	r22, r18
 422:	02 c0       	rjmp	.+4      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 424:	66 0f       	add	r22, r22
 426:	77 1f       	adc	r23, r23
 428:	8a 95       	dec	r24
 42a:	e2 f7       	brpl	.-8      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 42c:	cb 01       	movw	r24, r22
 42e:	96 2f       	mov	r25, r22
 430:	90 95       	com	r25
 432:	94 23       	and	r25, r20
 434:	98 bb       	out	0x18, r25	; 24
			set_bit(DDRB,PIN_NUM);
 436:	97 b3       	in	r25, 0x17	; 23
 438:	89 2b       	or	r24, r25
 43a:	87 bb       	out	0x17, r24	; 23
			break;
 43c:	23 c0       	rjmp	.+70     	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>

			case PC:
			clear_bit(PORTC,PIN_NUM);
 43e:	45 b3       	in	r20, 0x15	; 21
 440:	21 e0       	ldi	r18, 0x01	; 1
 442:	30 e0       	ldi	r19, 0x00	; 0
 444:	b9 01       	movw	r22, r18
 446:	02 c0       	rjmp	.+4      	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 448:	66 0f       	add	r22, r22
 44a:	77 1f       	adc	r23, r23
 44c:	8a 95       	dec	r24
 44e:	e2 f7       	brpl	.-8      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 450:	cb 01       	movw	r24, r22
 452:	96 2f       	mov	r25, r22
 454:	90 95       	com	r25
 456:	94 23       	and	r25, r20
 458:	95 bb       	out	0x15, r25	; 21
			set_bit(DDRC,PIN_NUM);
 45a:	94 b3       	in	r25, 0x14	; 20
 45c:	89 2b       	or	r24, r25
 45e:	84 bb       	out	0x14, r24	; 20
			break;
 460:	11 c0       	rjmp	.+34     	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>

			case PD:
			clear_bit(PORTD,PIN_NUM);
 462:	42 b3       	in	r20, 0x12	; 18
 464:	21 e0       	ldi	r18, 0x01	; 1
 466:	30 e0       	ldi	r19, 0x00	; 0
 468:	b9 01       	movw	r22, r18
 46a:	02 c0       	rjmp	.+4      	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
 46c:	66 0f       	add	r22, r22
 46e:	77 1f       	adc	r23, r23
 470:	8a 95       	dec	r24
 472:	e2 f7       	brpl	.-8      	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 474:	cb 01       	movw	r24, r22
 476:	96 2f       	mov	r25, r22
 478:	90 95       	com	r25
 47a:	94 23       	and	r25, r20
 47c:	92 bb       	out	0x12, r25	; 18
			set_bit(DDRD,PIN_NUM);
 47e:	91 b3       	in	r25, 0x11	; 17
 480:	89 2b       	or	r24, r25
 482:	81 bb       	out	0x11, r24	; 17
		break;
		return VALID_DIO;

	}
		}
}
 484:	08 95       	ret
 486:	82 e0       	ldi	r24, 0x02	; 2
 488:	08 95       	ret

0000048a <DIO_WRITEPIN>:
DIO_ERROR_TYPE DIO_WRITEPIN(DIO_PIN_TYPE PIN,DIO_VOLTAGE_TYPE VOLTAGE)
{
	
	DIO_PIN_TYPE PIN_NUM;
	DIO_PORT_TYPE PORT;
	PORT=PIN/8;
 48a:	98 2f       	mov	r25, r24
 48c:	96 95       	lsr	r25
 48e:	96 95       	lsr	r25
 490:	96 95       	lsr	r25
	PIN_NUM=PIN%8;
	if(PORT>4)
 492:	95 30       	cpi	r25, 0x05	; 5
 494:	08 f0       	brcs	.+2      	; 0x498 <DIO_WRITEPIN+0xe>
 496:	8e c0       	rjmp	.+284    	; 0x5b4 <DIO_WRITEPIN+0x12a>
	}
	else if(PIN_NUM>32)
	{
		return INVALID_PIN_NUMBER;
	}
	else if(VOLTAGE>2)
 498:	63 30       	cpi	r22, 0x03	; 3
 49a:	08 f0       	brcs	.+2      	; 0x49e <DIO_WRITEPIN+0x14>
 49c:	8d c0       	rjmp	.+282    	; 0x5b8 <DIO_WRITEPIN+0x12e>
{
	
	DIO_PIN_TYPE PIN_NUM;
	DIO_PORT_TYPE PORT;
	PORT=PIN/8;
	PIN_NUM=PIN%8;
 49e:	87 70       	andi	r24, 0x07	; 7
		return INVALID_VOLTAGE;
	}
	else 
	{
	
	if(VOLTAGE==HIGH)
 4a0:	61 30       	cpi	r22, 0x01	; 1
 4a2:	09 f0       	breq	.+2      	; 0x4a6 <DIO_WRITEPIN+0x1c>
 4a4:	40 c0       	rjmp	.+128    	; 0x526 <DIO_WRITEPIN+0x9c>
	{
		switch(PORT)
 4a6:	91 30       	cpi	r25, 0x01	; 1
 4a8:	a1 f0       	breq	.+40     	; 0x4d2 <DIO_WRITEPIN+0x48>
 4aa:	28 f0       	brcs	.+10     	; 0x4b6 <DIO_WRITEPIN+0x2c>
 4ac:	92 30       	cpi	r25, 0x02	; 2
 4ae:	f9 f0       	breq	.+62     	; 0x4ee <DIO_WRITEPIN+0x64>
 4b0:	93 30       	cpi	r25, 0x03	; 3
 4b2:	59 f1       	breq	.+86     	; 0x50a <DIO_WRITEPIN+0x80>
 4b4:	83 c0       	rjmp	.+262    	; 0x5bc <DIO_WRITEPIN+0x132>
		{
			case PA:
			set_bit(PORTA,PIN_NUM);
 4b6:	4b b3       	in	r20, 0x1b	; 27
 4b8:	21 e0       	ldi	r18, 0x01	; 1
 4ba:	30 e0       	ldi	r19, 0x00	; 0
 4bc:	b9 01       	movw	r22, r18
 4be:	02 c0       	rjmp	.+4      	; 0x4c4 <DIO_WRITEPIN+0x3a>
 4c0:	66 0f       	add	r22, r22
 4c2:	77 1f       	adc	r23, r23
 4c4:	8a 95       	dec	r24
 4c6:	e2 f7       	brpl	.-8      	; 0x4c0 <DIO_WRITEPIN+0x36>
 4c8:	cb 01       	movw	r24, r22
 4ca:	84 2b       	or	r24, r20
 4cc:	8b bb       	out	0x1b, r24	; 27
			case PD:
			set_bit(PORTD,PIN_NUM);
			break;

		}
		return VALID_DIO;
 4ce:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch(PORT)
		{
			case PA:
			set_bit(PORTA,PIN_NUM);
			break;
 4d0:	08 95       	ret
			case PB:
			set_bit(PORTB,PIN_NUM);
 4d2:	48 b3       	in	r20, 0x18	; 24
 4d4:	21 e0       	ldi	r18, 0x01	; 1
 4d6:	30 e0       	ldi	r19, 0x00	; 0
 4d8:	b9 01       	movw	r22, r18
 4da:	02 c0       	rjmp	.+4      	; 0x4e0 <DIO_WRITEPIN+0x56>
 4dc:	66 0f       	add	r22, r22
 4de:	77 1f       	adc	r23, r23
 4e0:	8a 95       	dec	r24
 4e2:	e2 f7       	brpl	.-8      	; 0x4dc <DIO_WRITEPIN+0x52>
 4e4:	cb 01       	movw	r24, r22
 4e6:	84 2b       	or	r24, r20
 4e8:	88 bb       	out	0x18, r24	; 24
			case PD:
			set_bit(PORTD,PIN_NUM);
			break;

		}
		return VALID_DIO;
 4ea:	80 e0       	ldi	r24, 0x00	; 0
			case PA:
			set_bit(PORTA,PIN_NUM);
			break;
			case PB:
			set_bit(PORTB,PIN_NUM);
			break;
 4ec:	08 95       	ret
			case PC:
			set_bit(PORTC,PIN_NUM);
 4ee:	45 b3       	in	r20, 0x15	; 21
 4f0:	21 e0       	ldi	r18, 0x01	; 1
 4f2:	30 e0       	ldi	r19, 0x00	; 0
 4f4:	b9 01       	movw	r22, r18
 4f6:	02 c0       	rjmp	.+4      	; 0x4fc <DIO_WRITEPIN+0x72>
 4f8:	66 0f       	add	r22, r22
 4fa:	77 1f       	adc	r23, r23
 4fc:	8a 95       	dec	r24
 4fe:	e2 f7       	brpl	.-8      	; 0x4f8 <DIO_WRITEPIN+0x6e>
 500:	cb 01       	movw	r24, r22
 502:	84 2b       	or	r24, r20
 504:	85 bb       	out	0x15, r24	; 21
			case PD:
			set_bit(PORTD,PIN_NUM);
			break;

		}
		return VALID_DIO;
 506:	80 e0       	ldi	r24, 0x00	; 0
			case PB:
			set_bit(PORTB,PIN_NUM);
			break;
			case PC:
			set_bit(PORTC,PIN_NUM);
			break;
 508:	08 95       	ret
			case PD:
			set_bit(PORTD,PIN_NUM);
 50a:	42 b3       	in	r20, 0x12	; 18
 50c:	21 e0       	ldi	r18, 0x01	; 1
 50e:	30 e0       	ldi	r19, 0x00	; 0
 510:	b9 01       	movw	r22, r18
 512:	02 c0       	rjmp	.+4      	; 0x518 <DIO_WRITEPIN+0x8e>
 514:	66 0f       	add	r22, r22
 516:	77 1f       	adc	r23, r23
 518:	8a 95       	dec	r24
 51a:	e2 f7       	brpl	.-8      	; 0x514 <DIO_WRITEPIN+0x8a>
 51c:	cb 01       	movw	r24, r22
 51e:	84 2b       	or	r24, r20
 520:	82 bb       	out	0x12, r24	; 18
			break;

		}
		return VALID_DIO;
 522:	80 e0       	ldi	r24, 0x00	; 0
			case PC:
			set_bit(PORTC,PIN_NUM);
			break;
			case PD:
			set_bit(PORTD,PIN_NUM);
			break;
 524:	08 95       	ret
		}
		return VALID_DIO;
	}


	else if(VOLTAGE==LOW)
 526:	61 11       	cpse	r22, r1
 528:	44 c0       	rjmp	.+136    	; 0x5b2 <DIO_WRITEPIN+0x128>
	{
		switch(PORT)
 52a:	91 30       	cpi	r25, 0x01	; 1
 52c:	a9 f0       	breq	.+42     	; 0x558 <DIO_WRITEPIN+0xce>
 52e:	28 f0       	brcs	.+10     	; 0x53a <DIO_WRITEPIN+0xb0>
 530:	92 30       	cpi	r25, 0x02	; 2
 532:	09 f1       	breq	.+66     	; 0x576 <DIO_WRITEPIN+0xec>
 534:	93 30       	cpi	r25, 0x03	; 3
 536:	71 f1       	breq	.+92     	; 0x594 <DIO_WRITEPIN+0x10a>
 538:	43 c0       	rjmp	.+134    	; 0x5c0 <DIO_WRITEPIN+0x136>
		{
			case PA:
			clear_bit(PORTA,PIN_NUM);
 53a:	4b b3       	in	r20, 0x1b	; 27
 53c:	21 e0       	ldi	r18, 0x01	; 1
 53e:	30 e0       	ldi	r19, 0x00	; 0
 540:	b9 01       	movw	r22, r18
 542:	02 c0       	rjmp	.+4      	; 0x548 <DIO_WRITEPIN+0xbe>
 544:	66 0f       	add	r22, r22
 546:	77 1f       	adc	r23, r23
 548:	8a 95       	dec	r24
 54a:	e2 f7       	brpl	.-8      	; 0x544 <DIO_WRITEPIN+0xba>
 54c:	cb 01       	movw	r24, r22
 54e:	80 95       	com	r24
 550:	84 23       	and	r24, r20
 552:	8b bb       	out	0x1b, r24	; 27
			case PD:
			clear_bit(PORTD,PIN_NUM);
			break;

		}
		return VALID_DIO;
 554:	80 e0       	ldi	r24, 0x00	; 0
	{
		switch(PORT)
		{
			case PA:
			clear_bit(PORTA,PIN_NUM);
			break;
 556:	08 95       	ret
			case PB:
			clear_bit(PORTB,PIN_NUM);
 558:	48 b3       	in	r20, 0x18	; 24
 55a:	21 e0       	ldi	r18, 0x01	; 1
 55c:	30 e0       	ldi	r19, 0x00	; 0
 55e:	b9 01       	movw	r22, r18
 560:	02 c0       	rjmp	.+4      	; 0x566 <DIO_WRITEPIN+0xdc>
 562:	66 0f       	add	r22, r22
 564:	77 1f       	adc	r23, r23
 566:	8a 95       	dec	r24
 568:	e2 f7       	brpl	.-8      	; 0x562 <DIO_WRITEPIN+0xd8>
 56a:	cb 01       	movw	r24, r22
 56c:	80 95       	com	r24
 56e:	84 23       	and	r24, r20
 570:	88 bb       	out	0x18, r24	; 24
			case PD:
			clear_bit(PORTD,PIN_NUM);
			break;

		}
		return VALID_DIO;
 572:	80 e0       	ldi	r24, 0x00	; 0
			case PA:
			clear_bit(PORTA,PIN_NUM);
			break;
			case PB:
			clear_bit(PORTB,PIN_NUM);
			break;
 574:	08 95       	ret
			case PC:
			clear_bit(PORTC,PIN_NUM);
 576:	45 b3       	in	r20, 0x15	; 21
 578:	21 e0       	ldi	r18, 0x01	; 1
 57a:	30 e0       	ldi	r19, 0x00	; 0
 57c:	b9 01       	movw	r22, r18
 57e:	02 c0       	rjmp	.+4      	; 0x584 <DIO_WRITEPIN+0xfa>
 580:	66 0f       	add	r22, r22
 582:	77 1f       	adc	r23, r23
 584:	8a 95       	dec	r24
 586:	e2 f7       	brpl	.-8      	; 0x580 <DIO_WRITEPIN+0xf6>
 588:	cb 01       	movw	r24, r22
 58a:	80 95       	com	r24
 58c:	84 23       	and	r24, r20
 58e:	85 bb       	out	0x15, r24	; 21
			case PD:
			clear_bit(PORTD,PIN_NUM);
			break;

		}
		return VALID_DIO;
 590:	80 e0       	ldi	r24, 0x00	; 0
			case PB:
			clear_bit(PORTB,PIN_NUM);
			break;
			case PC:
			clear_bit(PORTC,PIN_NUM);
			break;
 592:	08 95       	ret
			case PD:
			clear_bit(PORTD,PIN_NUM);
 594:	42 b3       	in	r20, 0x12	; 18
 596:	21 e0       	ldi	r18, 0x01	; 1
 598:	30 e0       	ldi	r19, 0x00	; 0
 59a:	b9 01       	movw	r22, r18
 59c:	02 c0       	rjmp	.+4      	; 0x5a2 <DIO_WRITEPIN+0x118>
 59e:	66 0f       	add	r22, r22
 5a0:	77 1f       	adc	r23, r23
 5a2:	8a 95       	dec	r24
 5a4:	e2 f7       	brpl	.-8      	; 0x59e <DIO_WRITEPIN+0x114>
 5a6:	cb 01       	movw	r24, r22
 5a8:	80 95       	com	r24
 5aa:	84 23       	and	r24, r20
 5ac:	82 bb       	out	0x12, r24	; 18
			break;

		}
		return VALID_DIO;
 5ae:	80 e0       	ldi	r24, 0x00	; 0
			case PC:
			clear_bit(PORTC,PIN_NUM);
			break;
			case PD:
			clear_bit(PORTD,PIN_NUM);
			break;
 5b0:	08 95       	ret

		}
		return VALID_DIO;
	}
}
}
 5b2:	08 95       	ret
	DIO_PORT_TYPE PORT;
	PORT=PIN/8;
	PIN_NUM=PIN%8;
	if(PORT>4)
	{
		return INVALID_PORT;
 5b4:	82 e0       	ldi	r24, 0x02	; 2
 5b6:	08 95       	ret
	{
		return INVALID_PIN_NUMBER;
	}
	else if(VOLTAGE>2)
	{
		return INVALID_VOLTAGE;
 5b8:	83 e0       	ldi	r24, 0x03	; 3
 5ba:	08 95       	ret
			case PD:
			set_bit(PORTD,PIN_NUM);
			break;

		}
		return VALID_DIO;
 5bc:	80 e0       	ldi	r24, 0x00	; 0
 5be:	08 95       	ret
			case PD:
			clear_bit(PORTD,PIN_NUM);
			break;

		}
		return VALID_DIO;
 5c0:	80 e0       	ldi	r24, 0x00	; 0
	}
}
}
 5c2:	08 95       	ret

000005c4 <UART_init>:
	/************************************************************************/
uint8_t UART_receive(void)
{
	while (!read_bit(UCSRA,RXC));
	return UDR;
}
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	fc 01       	movw	r30, r24
 5c8:	ee 0f       	add	r30, r30
 5ca:	ff 1f       	adc	r31, r31
 5cc:	e8 0f       	add	r30, r24
 5ce:	f9 1f       	adc	r31, r25
 5d0:	ee 0f       	add	r30, r30
 5d2:	ff 1f       	adc	r31, r31
 5d4:	e0 5a       	subi	r30, 0xA0	; 160
 5d6:	ff 4f       	sbci	r31, 0xFF	; 255
 5d8:	25 81       	ldd	r18, Z+5	; 0x05
 5da:	21 11       	cpse	r18, r1
 5dc:	16 c0       	rjmp	.+44     	; 0x60a <UART_init+0x46>
 5de:	fc 01       	movw	r30, r24
 5e0:	ee 0f       	add	r30, r30
 5e2:	ff 1f       	adc	r31, r31
 5e4:	e8 0f       	add	r30, r24
 5e6:	f9 1f       	adc	r31, r25
 5e8:	ee 0f       	add	r30, r30
 5ea:	ff 1f       	adc	r31, r31
 5ec:	e0 5a       	subi	r30, 0xA0	; 160
 5ee:	ff 4f       	sbci	r31, 0xFF	; 255
 5f0:	20 81       	ld	r18, Z
 5f2:	21 11       	cpse	r18, r1
 5f4:	03 c0       	rjmp	.+6      	; 0x5fc <UART_init+0x38>
 5f6:	2f ec       	ldi	r18, 0xCF	; 207
 5f8:	29 b9       	out	0x09, r18	; 9
 5fa:	03 c1       	rjmp	.+518    	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 5fc:	21 30       	cpi	r18, 0x01	; 1
 5fe:	09 f0       	breq	.+2      	; 0x602 <UART_init+0x3e>
 600:	bb c1       	rjmp	.+886    	; 0x978 <__stack+0x119>
 602:	20 bd       	out	0x20, r18	; 32
 604:	20 ea       	ldi	r18, 0xA0	; 160
 606:	29 b9       	out	0x09, r18	; 9
 608:	fc c0       	rjmp	.+504    	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 60a:	21 30       	cpi	r18, 0x01	; 1
 60c:	a9 f4       	brne	.+42     	; 0x638 <UART_init+0x74>
 60e:	fc 01       	movw	r30, r24
 610:	ee 0f       	add	r30, r30
 612:	ff 1f       	adc	r31, r31
 614:	e8 0f       	add	r30, r24
 616:	f9 1f       	adc	r31, r25
 618:	ee 0f       	add	r30, r30
 61a:	ff 1f       	adc	r31, r31
 61c:	e0 5a       	subi	r30, 0xA0	; 160
 61e:	ff 4f       	sbci	r31, 0xFF	; 255
 620:	20 81       	ld	r18, Z
 622:	21 11       	cpse	r18, r1
 624:	03 c0       	rjmp	.+6      	; 0x62c <UART_init+0x68>
 626:	27 e6       	ldi	r18, 0x67	; 103
 628:	29 b9       	out	0x09, r18	; 9
 62a:	eb c0       	rjmp	.+470    	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 62c:	21 30       	cpi	r18, 0x01	; 1
 62e:	09 f0       	breq	.+2      	; 0x632 <UART_init+0x6e>
 630:	a3 c1       	rjmp	.+838    	; 0x978 <__stack+0x119>
 632:	2f ec       	ldi	r18, 0xCF	; 207
 634:	29 b9       	out	0x09, r18	; 9
 636:	e5 c0       	rjmp	.+458    	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 638:	22 30       	cpi	r18, 0x02	; 2
 63a:	a9 f4       	brne	.+42     	; 0x666 <UART_init+0xa2>
 63c:	fc 01       	movw	r30, r24
 63e:	ee 0f       	add	r30, r30
 640:	ff 1f       	adc	r31, r31
 642:	e8 0f       	add	r30, r24
 644:	f9 1f       	adc	r31, r25
 646:	ee 0f       	add	r30, r30
 648:	ff 1f       	adc	r31, r31
 64a:	e0 5a       	subi	r30, 0xA0	; 160
 64c:	ff 4f       	sbci	r31, 0xFF	; 255
 64e:	20 81       	ld	r18, Z
 650:	21 11       	cpse	r18, r1
 652:	03 c0       	rjmp	.+6      	; 0x65a <UART_init+0x96>
 654:	23 e3       	ldi	r18, 0x33	; 51
 656:	29 b9       	out	0x09, r18	; 9
 658:	d4 c0       	rjmp	.+424    	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 65a:	21 30       	cpi	r18, 0x01	; 1
 65c:	09 f0       	breq	.+2      	; 0x660 <UART_init+0x9c>
 65e:	8c c1       	rjmp	.+792    	; 0x978 <__stack+0x119>
 660:	27 e6       	ldi	r18, 0x67	; 103
 662:	29 b9       	out	0x09, r18	; 9
 664:	ce c0       	rjmp	.+412    	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 666:	23 30       	cpi	r18, 0x03	; 3
 668:	a9 f4       	brne	.+42     	; 0x694 <UART_init+0xd0>
 66a:	fc 01       	movw	r30, r24
 66c:	ee 0f       	add	r30, r30
 66e:	ff 1f       	adc	r31, r31
 670:	e8 0f       	add	r30, r24
 672:	f9 1f       	adc	r31, r25
 674:	ee 0f       	add	r30, r30
 676:	ff 1f       	adc	r31, r31
 678:	e0 5a       	subi	r30, 0xA0	; 160
 67a:	ff 4f       	sbci	r31, 0xFF	; 255
 67c:	20 81       	ld	r18, Z
 67e:	21 11       	cpse	r18, r1
 680:	03 c0       	rjmp	.+6      	; 0x688 <UART_init+0xc4>
 682:	22 e2       	ldi	r18, 0x22	; 34
 684:	29 b9       	out	0x09, r18	; 9
 686:	bd c0       	rjmp	.+378    	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 688:	21 30       	cpi	r18, 0x01	; 1
 68a:	09 f0       	breq	.+2      	; 0x68e <UART_init+0xca>
 68c:	75 c1       	rjmp	.+746    	; 0x978 <__stack+0x119>
 68e:	24 e4       	ldi	r18, 0x44	; 68
 690:	29 b9       	out	0x09, r18	; 9
 692:	b7 c0       	rjmp	.+366    	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 694:	24 30       	cpi	r18, 0x04	; 4
 696:	a9 f4       	brne	.+42     	; 0x6c2 <UART_init+0xfe>
 698:	fc 01       	movw	r30, r24
 69a:	ee 0f       	add	r30, r30
 69c:	ff 1f       	adc	r31, r31
 69e:	e8 0f       	add	r30, r24
 6a0:	f9 1f       	adc	r31, r25
 6a2:	ee 0f       	add	r30, r30
 6a4:	ff 1f       	adc	r31, r31
 6a6:	e0 5a       	subi	r30, 0xA0	; 160
 6a8:	ff 4f       	sbci	r31, 0xFF	; 255
 6aa:	20 81       	ld	r18, Z
 6ac:	21 11       	cpse	r18, r1
 6ae:	03 c0       	rjmp	.+6      	; 0x6b6 <UART_init+0xf2>
 6b0:	29 e1       	ldi	r18, 0x19	; 25
 6b2:	29 b9       	out	0x09, r18	; 9
 6b4:	a6 c0       	rjmp	.+332    	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 6b6:	21 30       	cpi	r18, 0x01	; 1
 6b8:	09 f0       	breq	.+2      	; 0x6bc <UART_init+0xf8>
 6ba:	5e c1       	rjmp	.+700    	; 0x978 <__stack+0x119>
 6bc:	23 e3       	ldi	r18, 0x33	; 51
 6be:	29 b9       	out	0x09, r18	; 9
 6c0:	a0 c0       	rjmp	.+320    	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 6c2:	25 30       	cpi	r18, 0x05	; 5
 6c4:	a9 f4       	brne	.+42     	; 0x6f0 <UART_init+0x12c>
 6c6:	fc 01       	movw	r30, r24
 6c8:	ee 0f       	add	r30, r30
 6ca:	ff 1f       	adc	r31, r31
 6cc:	e8 0f       	add	r30, r24
 6ce:	f9 1f       	adc	r31, r25
 6d0:	ee 0f       	add	r30, r30
 6d2:	ff 1f       	adc	r31, r31
 6d4:	e0 5a       	subi	r30, 0xA0	; 160
 6d6:	ff 4f       	sbci	r31, 0xFF	; 255
 6d8:	20 81       	ld	r18, Z
 6da:	21 11       	cpse	r18, r1
 6dc:	03 c0       	rjmp	.+6      	; 0x6e4 <UART_init+0x120>
 6de:	20 e1       	ldi	r18, 0x10	; 16
 6e0:	29 b9       	out	0x09, r18	; 9
 6e2:	8f c0       	rjmp	.+286    	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 6e4:	21 30       	cpi	r18, 0x01	; 1
 6e6:	09 f0       	breq	.+2      	; 0x6ea <UART_init+0x126>
 6e8:	47 c1       	rjmp	.+654    	; 0x978 <__stack+0x119>
 6ea:	22 e2       	ldi	r18, 0x22	; 34
 6ec:	29 b9       	out	0x09, r18	; 9
 6ee:	89 c0       	rjmp	.+274    	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 6f0:	26 30       	cpi	r18, 0x06	; 6
 6f2:	a9 f4       	brne	.+42     	; 0x71e <UART_init+0x15a>
 6f4:	fc 01       	movw	r30, r24
 6f6:	ee 0f       	add	r30, r30
 6f8:	ff 1f       	adc	r31, r31
 6fa:	e8 0f       	add	r30, r24
 6fc:	f9 1f       	adc	r31, r25
 6fe:	ee 0f       	add	r30, r30
 700:	ff 1f       	adc	r31, r31
 702:	e0 5a       	subi	r30, 0xA0	; 160
 704:	ff 4f       	sbci	r31, 0xFF	; 255
 706:	20 81       	ld	r18, Z
 708:	21 11       	cpse	r18, r1
 70a:	03 c0       	rjmp	.+6      	; 0x712 <UART_init+0x14e>
 70c:	2c e0       	ldi	r18, 0x0C	; 12
 70e:	29 b9       	out	0x09, r18	; 9
 710:	78 c0       	rjmp	.+240    	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 712:	21 30       	cpi	r18, 0x01	; 1
 714:	09 f0       	breq	.+2      	; 0x718 <UART_init+0x154>
 716:	30 c1       	rjmp	.+608    	; 0x978 <__stack+0x119>
 718:	29 e1       	ldi	r18, 0x19	; 25
 71a:	29 b9       	out	0x09, r18	; 9
 71c:	72 c0       	rjmp	.+228    	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 71e:	27 30       	cpi	r18, 0x07	; 7
 720:	a9 f4       	brne	.+42     	; 0x74c <UART_init+0x188>
 722:	fc 01       	movw	r30, r24
 724:	ee 0f       	add	r30, r30
 726:	ff 1f       	adc	r31, r31
 728:	e8 0f       	add	r30, r24
 72a:	f9 1f       	adc	r31, r25
 72c:	ee 0f       	add	r30, r30
 72e:	ff 1f       	adc	r31, r31
 730:	e0 5a       	subi	r30, 0xA0	; 160
 732:	ff 4f       	sbci	r31, 0xFF	; 255
 734:	20 81       	ld	r18, Z
 736:	21 11       	cpse	r18, r1
 738:	03 c0       	rjmp	.+6      	; 0x740 <UART_init+0x17c>
 73a:	28 e0       	ldi	r18, 0x08	; 8
 73c:	29 b9       	out	0x09, r18	; 9
 73e:	61 c0       	rjmp	.+194    	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 740:	21 30       	cpi	r18, 0x01	; 1
 742:	09 f0       	breq	.+2      	; 0x746 <UART_init+0x182>
 744:	19 c1       	rjmp	.+562    	; 0x978 <__stack+0x119>
 746:	20 e1       	ldi	r18, 0x10	; 16
 748:	29 b9       	out	0x09, r18	; 9
 74a:	5b c0       	rjmp	.+182    	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 74c:	28 30       	cpi	r18, 0x08	; 8
 74e:	a9 f4       	brne	.+42     	; 0x77a <UART_init+0x1b6>
 750:	fc 01       	movw	r30, r24
 752:	ee 0f       	add	r30, r30
 754:	ff 1f       	adc	r31, r31
 756:	e8 0f       	add	r30, r24
 758:	f9 1f       	adc	r31, r25
 75a:	ee 0f       	add	r30, r30
 75c:	ff 1f       	adc	r31, r31
 75e:	e0 5a       	subi	r30, 0xA0	; 160
 760:	ff 4f       	sbci	r31, 0xFF	; 255
 762:	20 81       	ld	r18, Z
 764:	21 11       	cpse	r18, r1
 766:	03 c0       	rjmp	.+6      	; 0x76e <UART_init+0x1aa>
 768:	28 e0       	ldi	r18, 0x08	; 8
 76a:	29 b9       	out	0x09, r18	; 9
 76c:	4a c0       	rjmp	.+148    	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 76e:	21 30       	cpi	r18, 0x01	; 1
 770:	09 f0       	breq	.+2      	; 0x774 <UART_init+0x1b0>
 772:	02 c1       	rjmp	.+516    	; 0x978 <__stack+0x119>
 774:	2c e0       	ldi	r18, 0x0C	; 12
 776:	29 b9       	out	0x09, r18	; 9
 778:	44 c0       	rjmp	.+136    	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 77a:	29 30       	cpi	r18, 0x09	; 9
 77c:	a9 f4       	brne	.+42     	; 0x7a8 <UART_init+0x1e4>
 77e:	fc 01       	movw	r30, r24
 780:	ee 0f       	add	r30, r30
 782:	ff 1f       	adc	r31, r31
 784:	e8 0f       	add	r30, r24
 786:	f9 1f       	adc	r31, r25
 788:	ee 0f       	add	r30, r30
 78a:	ff 1f       	adc	r31, r31
 78c:	e0 5a       	subi	r30, 0xA0	; 160
 78e:	ff 4f       	sbci	r31, 0xFF	; 255
 790:	20 81       	ld	r18, Z
 792:	21 11       	cpse	r18, r1
 794:	03 c0       	rjmp	.+6      	; 0x79c <UART_init+0x1d8>
 796:	23 e0       	ldi	r18, 0x03	; 3
 798:	29 b9       	out	0x09, r18	; 9
 79a:	33 c0       	rjmp	.+102    	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 79c:	21 30       	cpi	r18, 0x01	; 1
 79e:	09 f0       	breq	.+2      	; 0x7a2 <UART_init+0x1de>
 7a0:	eb c0       	rjmp	.+470    	; 0x978 <__stack+0x119>
 7a2:	28 e0       	ldi	r18, 0x08	; 8
 7a4:	29 b9       	out	0x09, r18	; 9
 7a6:	2d c0       	rjmp	.+90     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 7a8:	2a 30       	cpi	r18, 0x0A	; 10
 7aa:	a9 f4       	brne	.+42     	; 0x7d6 <UART_init+0x212>
 7ac:	fc 01       	movw	r30, r24
 7ae:	ee 0f       	add	r30, r30
 7b0:	ff 1f       	adc	r31, r31
 7b2:	e8 0f       	add	r30, r24
 7b4:	f9 1f       	adc	r31, r25
 7b6:	ee 0f       	add	r30, r30
 7b8:	ff 1f       	adc	r31, r31
 7ba:	e0 5a       	subi	r30, 0xA0	; 160
 7bc:	ff 4f       	sbci	r31, 0xFF	; 255
 7be:	20 81       	ld	r18, Z
 7c0:	21 11       	cpse	r18, r1
 7c2:	03 c0       	rjmp	.+6      	; 0x7ca <UART_init+0x206>
 7c4:	21 e0       	ldi	r18, 0x01	; 1
 7c6:	29 b9       	out	0x09, r18	; 9
 7c8:	1c c0       	rjmp	.+56     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 7ca:	21 30       	cpi	r18, 0x01	; 1
 7cc:	09 f0       	breq	.+2      	; 0x7d0 <UART_init+0x20c>
 7ce:	d4 c0       	rjmp	.+424    	; 0x978 <__stack+0x119>
 7d0:	23 e0       	ldi	r18, 0x03	; 3
 7d2:	29 b9       	out	0x09, r18	; 9
 7d4:	16 c0       	rjmp	.+44     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 7d6:	2b 30       	cpi	r18, 0x0B	; 11
 7d8:	a1 f4       	brne	.+40     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 7da:	fc 01       	movw	r30, r24
 7dc:	ee 0f       	add	r30, r30
 7de:	ff 1f       	adc	r31, r31
 7e0:	e8 0f       	add	r30, r24
 7e2:	f9 1f       	adc	r31, r25
 7e4:	ee 0f       	add	r30, r30
 7e6:	ff 1f       	adc	r31, r31
 7e8:	e0 5a       	subi	r30, 0xA0	; 160
 7ea:	ff 4f       	sbci	r31, 0xFF	; 255
 7ec:	20 81       	ld	r18, Z
 7ee:	21 11       	cpse	r18, r1
 7f0:	03 c0       	rjmp	.+6      	; 0x7f8 <UART_init+0x234>
 7f2:	21 e0       	ldi	r18, 0x01	; 1
 7f4:	29 b9       	out	0x09, r18	; 9
 7f6:	05 c0       	rjmp	.+10     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 7f8:	21 30       	cpi	r18, 0x01	; 1
 7fa:	09 f0       	breq	.+2      	; 0x7fe <UART_init+0x23a>
 7fc:	bd c0       	rjmp	.+378    	; 0x978 <__stack+0x119>
 7fe:	23 e0       	ldi	r18, 0x03	; 3
 800:	29 b9       	out	0x09, r18	; 9
 802:	fc 01       	movw	r30, r24
 804:	ee 0f       	add	r30, r30
 806:	ff 1f       	adc	r31, r31
 808:	e8 0f       	add	r30, r24
 80a:	f9 1f       	adc	r31, r25
 80c:	ee 0f       	add	r30, r30
 80e:	ff 1f       	adc	r31, r31
 810:	e0 5a       	subi	r30, 0xA0	; 160
 812:	ff 4f       	sbci	r31, 0xFF	; 255
 814:	20 81       	ld	r18, Z
 816:	21 11       	cpse	r18, r1
 818:	02 c0       	rjmp	.+4      	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 81a:	5a 98       	cbi	0x0b, 2	; 11
 81c:	04 c0       	rjmp	.+8      	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 81e:	21 30       	cpi	r18, 0x01	; 1
 820:	09 f0       	breq	.+2      	; 0x824 <__DATA_REGION_LENGTH__+0x24>
 822:	92 c0       	rjmp	.+292    	; 0x948 <__stack+0xe9>
 824:	5a 9a       	sbi	0x0b, 2	; 11
 826:	fc 01       	movw	r30, r24
 828:	ee 0f       	add	r30, r30
 82a:	ff 1f       	adc	r31, r31
 82c:	e8 0f       	add	r30, r24
 82e:	f9 1f       	adc	r31, r25
 830:	ee 0f       	add	r30, r30
 832:	ff 1f       	adc	r31, r31
 834:	e0 5a       	subi	r30, 0xA0	; 160
 836:	ff 4f       	sbci	r31, 0xFF	; 255
 838:	21 81       	ldd	r18, Z+1	; 0x01
 83a:	21 11       	cpse	r18, r1
 83c:	07 c0       	rjmp	.+14     	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
 83e:	20 b5       	in	r18, 0x20	; 32
 840:	2f 7e       	andi	r18, 0xEF	; 239
 842:	20 bd       	out	0x20, r18	; 32
 844:	20 b5       	in	r18, 0x20	; 32
 846:	2f 7d       	andi	r18, 0xDF	; 223
 848:	20 bd       	out	0x20, r18	; 32
 84a:	1b c0       	rjmp	.+54     	; 0x882 <__stack+0x23>
 84c:	fc 01       	movw	r30, r24
 84e:	ee 0f       	add	r30, r30
 850:	ff 1f       	adc	r31, r31
 852:	e8 0f       	add	r30, r24
 854:	f9 1f       	adc	r31, r25
 856:	ee 0f       	add	r30, r30
 858:	ff 1f       	adc	r31, r31
 85a:	e0 5a       	subi	r30, 0xA0	; 160
 85c:	ff 4f       	sbci	r31, 0xFF	; 255
 85e:	20 81       	ld	r18, Z
 860:	21 30       	cpi	r18, 0x01	; 1
 862:	39 f4       	brne	.+14     	; 0x872 <__stack+0x13>
 864:	20 b5       	in	r18, 0x20	; 32
 866:	2f 7e       	andi	r18, 0xEF	; 239
 868:	20 bd       	out	0x20, r18	; 32
 86a:	20 b5       	in	r18, 0x20	; 32
 86c:	20 62       	ori	r18, 0x20	; 32
 86e:	20 bd       	out	0x20, r18	; 32
 870:	08 c0       	rjmp	.+16     	; 0x882 <__stack+0x23>
 872:	22 30       	cpi	r18, 0x02	; 2
 874:	31 f4       	brne	.+12     	; 0x882 <__stack+0x23>
 876:	20 b5       	in	r18, 0x20	; 32
 878:	20 61       	ori	r18, 0x10	; 16
 87a:	20 bd       	out	0x20, r18	; 32
 87c:	20 b5       	in	r18, 0x20	; 32
 87e:	20 62       	ori	r18, 0x20	; 32
 880:	20 bd       	out	0x20, r18	; 32
 882:	fc 01       	movw	r30, r24
 884:	ee 0f       	add	r30, r30
 886:	ff 1f       	adc	r31, r31
 888:	e8 0f       	add	r30, r24
 88a:	f9 1f       	adc	r31, r25
 88c:	ee 0f       	add	r30, r30
 88e:	ff 1f       	adc	r31, r31
 890:	e0 5a       	subi	r30, 0xA0	; 160
 892:	ff 4f       	sbci	r31, 0xFF	; 255
 894:	22 81       	ldd	r18, Z+2	; 0x02
 896:	21 11       	cpse	r18, r1
 898:	04 c0       	rjmp	.+8      	; 0x8a2 <__stack+0x43>
 89a:	20 b5       	in	r18, 0x20	; 32
 89c:	27 7f       	andi	r18, 0xF7	; 247
 89e:	20 bd       	out	0x20, r18	; 32
 8a0:	05 c0       	rjmp	.+10     	; 0x8ac <__stack+0x4d>
 8a2:	21 30       	cpi	r18, 0x01	; 1
 8a4:	19 f4       	brne	.+6      	; 0x8ac <__stack+0x4d>
 8a6:	20 b5       	in	r18, 0x20	; 32
 8a8:	28 60       	ori	r18, 0x08	; 8
 8aa:	20 bd       	out	0x20, r18	; 32
 8ac:	fc 01       	movw	r30, r24
 8ae:	ee 0f       	add	r30, r30
 8b0:	ff 1f       	adc	r31, r31
 8b2:	e8 0f       	add	r30, r24
 8b4:	f9 1f       	adc	r31, r25
 8b6:	ee 0f       	add	r30, r30
 8b8:	ff 1f       	adc	r31, r31
 8ba:	e0 5a       	subi	r30, 0xA0	; 160
 8bc:	ff 4f       	sbci	r31, 0xFF	; 255
 8be:	24 81       	ldd	r18, Z+4	; 0x04
 8c0:	25 30       	cpi	r18, 0x05	; 5
 8c2:	39 f4       	brne	.+14     	; 0x8d2 <__stack+0x73>
 8c4:	20 b5       	in	r18, 0x20	; 32
 8c6:	2d 7f       	andi	r18, 0xFD	; 253
 8c8:	20 bd       	out	0x20, r18	; 32
 8ca:	20 b5       	in	r18, 0x20	; 32
 8cc:	2b 7f       	andi	r18, 0xFB	; 251
 8ce:	20 bd       	out	0x20, r18	; 32
 8d0:	24 c0       	rjmp	.+72     	; 0x91a <__stack+0xbb>
 8d2:	fc 01       	movw	r30, r24
 8d4:	ee 0f       	add	r30, r30
 8d6:	ff 1f       	adc	r31, r31
 8d8:	e8 0f       	add	r30, r24
 8da:	f9 1f       	adc	r31, r25
 8dc:	ee 0f       	add	r30, r30
 8de:	ff 1f       	adc	r31, r31
 8e0:	e0 5a       	subi	r30, 0xA0	; 160
 8e2:	ff 4f       	sbci	r31, 0xFF	; 255
 8e4:	23 81       	ldd	r18, Z+3	; 0x03
 8e6:	26 30       	cpi	r18, 0x06	; 6
 8e8:	39 f4       	brne	.+14     	; 0x8f8 <__stack+0x99>
 8ea:	20 b5       	in	r18, 0x20	; 32
 8ec:	22 60       	ori	r18, 0x02	; 2
 8ee:	20 bd       	out	0x20, r18	; 32
 8f0:	20 b5       	in	r18, 0x20	; 32
 8f2:	2b 7f       	andi	r18, 0xFB	; 251
 8f4:	20 bd       	out	0x20, r18	; 32
 8f6:	11 c0       	rjmp	.+34     	; 0x91a <__stack+0xbb>
 8f8:	27 30       	cpi	r18, 0x07	; 7
 8fa:	39 f4       	brne	.+14     	; 0x90a <__stack+0xab>
 8fc:	20 b5       	in	r18, 0x20	; 32
 8fe:	2d 7f       	andi	r18, 0xFD	; 253
 900:	20 bd       	out	0x20, r18	; 32
 902:	20 b5       	in	r18, 0x20	; 32
 904:	24 60       	ori	r18, 0x04	; 4
 906:	20 bd       	out	0x20, r18	; 32
 908:	08 c0       	rjmp	.+16     	; 0x91a <__stack+0xbb>
 90a:	28 30       	cpi	r18, 0x08	; 8
 90c:	31 f4       	brne	.+12     	; 0x91a <__stack+0xbb>
 90e:	20 b5       	in	r18, 0x20	; 32
 910:	22 60       	ori	r18, 0x02	; 2
 912:	20 bd       	out	0x20, r18	; 32
 914:	20 b5       	in	r18, 0x20	; 32
 916:	24 60       	ori	r18, 0x04	; 4
 918:	20 bd       	out	0x20, r18	; 32
 91a:	fc 01       	movw	r30, r24
 91c:	ee 0f       	add	r30, r30
 91e:	ff 1f       	adc	r31, r31
 920:	e8 0f       	add	r30, r24
 922:	f9 1f       	adc	r31, r25
 924:	ee 0f       	add	r30, r30
 926:	ff 1f       	adc	r31, r31
 928:	e0 5a       	subi	r30, 0xA0	; 160
 92a:	ff 4f       	sbci	r31, 0xFF	; 255
 92c:	84 81       	ldd	r24, Z+4	; 0x04
 92e:	81 11       	cpse	r24, r1
 930:	02 c0       	rjmp	.+4      	; 0x936 <__stack+0xd7>
 932:	53 9a       	sbi	0x0a, 3	; 10
 934:	08 95       	ret
 936:	81 30       	cpi	r24, 0x01	; 1
 938:	11 f4       	brne	.+4      	; 0x93e <__stack+0xdf>
 93a:	54 9a       	sbi	0x0a, 4	; 10
 93c:	08 95       	ret
 93e:	82 30       	cpi	r24, 0x02	; 2
 940:	41 f5       	brne	.+80     	; 0x992 <__stack+0x133>
 942:	53 9a       	sbi	0x0a, 3	; 10
 944:	54 9a       	sbi	0x0a, 4	; 10
 946:	08 95       	ret
 948:	fc 01       	movw	r30, r24
 94a:	ee 0f       	add	r30, r30
 94c:	ff 1f       	adc	r31, r31
 94e:	e8 0f       	add	r30, r24
 950:	f9 1f       	adc	r31, r25
 952:	ee 0f       	add	r30, r30
 954:	ff 1f       	adc	r31, r31
 956:	e0 5a       	subi	r30, 0xA0	; 160
 958:	ff 4f       	sbci	r31, 0xFF	; 255
 95a:	31 81       	ldd	r19, Z+1	; 0x01
 95c:	31 11       	cpse	r19, r1
 95e:	89 cf       	rjmp	.-238    	; 0x872 <__stack+0x13>
 960:	6e cf       	rjmp	.-292    	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
 962:	fc 01       	movw	r30, r24
 964:	ee 0f       	add	r30, r30
 966:	ff 1f       	adc	r31, r31
 968:	e8 0f       	add	r30, r24
 96a:	f9 1f       	adc	r31, r25
 96c:	ee 0f       	add	r30, r30
 96e:	ff 1f       	adc	r31, r31
 970:	e0 5a       	subi	r30, 0xA0	; 160
 972:	ff 4f       	sbci	r31, 0xFF	; 255
 974:	20 81       	ld	r18, Z
 976:	7d cf       	rjmp	.-262    	; 0x872 <__stack+0x13>
 978:	fc 01       	movw	r30, r24
 97a:	ee 0f       	add	r30, r30
 97c:	ff 1f       	adc	r31, r31
 97e:	e8 0f       	add	r30, r24
 980:	f9 1f       	adc	r31, r25
 982:	ee 0f       	add	r30, r30
 984:	ff 1f       	adc	r31, r31
 986:	e0 5a       	subi	r30, 0xA0	; 160
 988:	ff 4f       	sbci	r31, 0xFF	; 255
 98a:	21 81       	ldd	r18, Z+1	; 0x01
 98c:	21 11       	cpse	r18, r1
 98e:	e9 cf       	rjmp	.-46     	; 0x962 <__stack+0x103>
 990:	56 cf       	rjmp	.-340    	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
 992:	08 95       	ret

00000994 <UART_transmit_NoBlock>:
	/************************************************************************/

void UART_transmit_NoBlock(uint8_t data)
{

	UDR=data;
 994:	8c b9       	out	0x0c, r24	; 12
 996:	08 95       	ret

00000998 <UART_receive_NoBlock>:
	/************************************************************************/
	
uint8_t UART_receive_NoBlock(void)
{

	return UDR;
 998:	8c b1       	in	r24, 0x0c	; 12
}
 99a:	08 95       	ret

0000099c <UART_TX_INTENABLE>:
																			*/
	/************************************************************************/

void UART_TX_INTENABLE(void)
{
	set_bit(UCSRB,TXCIE);
 99c:	56 9a       	sbi	0x0a, 6	; 10
 99e:	08 95       	ret

000009a0 <UART_RX_INTENABLE>:
		Returns:-void
																			*/
	/************************************************************************/
void UART_RX_INTENABLE(void)
{
	set_bit(UCSRB,RXCIE);
 9a0:	57 9a       	sbi	0x0a, 7	; 10
 9a2:	08 95       	ret

000009a4 <UART_TX_INTDISABLE>:
																			*/
	/************************************************************************/
	
void UART_TX_INTDISABLE(void)
{
	clear_bit(UCSRB,TXCIE);
 9a4:	56 98       	cbi	0x0a, 6	; 10
 9a6:	08 95       	ret

000009a8 <UART_RX_INTDISABLE>:
																			*/
	/************************************************************************/
	
void UART_RX_INTDISABLE(void)
{
	clear_bit(UCSRB,RXCIE);
 9a8:	57 98       	cbi	0x0a, 7	; 10
 9aa:	08 95       	ret

000009ac <UART_SetCallBack>:
		Returns:-void
																			*/
	/************************************************************************/
void UART_SetCallBack(enu_Callback_t enu_Callback,void(*FPTR)(void))
{
	if (enu_Callback==Uart_tx_t)
 9ac:	81 11       	cpse	r24, r1
 9ae:	05 c0       	rjmp	.+10     	; 0x9ba <UART_SetCallBack+0xe>
	{
		UART_TRANS_Fptr=FPTR;
 9b0:	70 93 4d 01 	sts	0x014D, r23	; 0x80014d <UART_TRANS_Fptr+0x1>
 9b4:	60 93 4c 01 	sts	0x014C, r22	; 0x80014c <UART_TRANS_Fptr>
 9b8:	08 95       	ret
	}
	else if (enu_Callback==Uart_rx_t)
 9ba:	81 30       	cpi	r24, 0x01	; 1
 9bc:	21 f4       	brne	.+8      	; 0x9c6 <UART_SetCallBack+0x1a>
	{
		UART_RECE_Fptr=FPTR;
 9be:	70 93 4b 01 	sts	0x014B, r23	; 0x80014b <UART_RECE_Fptr+0x1>
 9c2:	60 93 4a 01 	sts	0x014A, r22	; 0x80014a <UART_RECE_Fptr>
 9c6:	08 95       	ret

000009c8 <__vector_15>:
}

/***********************************************/

ISR(UART_TX_vect)
{
 9c8:	1f 92       	push	r1
 9ca:	0f 92       	push	r0
 9cc:	0f b6       	in	r0, 0x3f	; 63
 9ce:	0f 92       	push	r0
 9d0:	11 24       	eor	r1, r1
 9d2:	2f 93       	push	r18
 9d4:	3f 93       	push	r19
 9d6:	4f 93       	push	r20
 9d8:	5f 93       	push	r21
 9da:	6f 93       	push	r22
 9dc:	7f 93       	push	r23
 9de:	8f 93       	push	r24
 9e0:	9f 93       	push	r25
 9e2:	af 93       	push	r26
 9e4:	bf 93       	push	r27
 9e6:	ef 93       	push	r30
 9e8:	ff 93       	push	r31

	
	if (UART_TRANS_Fptr!=NULL_PTR)
 9ea:	e0 91 4c 01 	lds	r30, 0x014C	; 0x80014c <UART_TRANS_Fptr>
 9ee:	f0 91 4d 01 	lds	r31, 0x014D	; 0x80014d <UART_TRANS_Fptr+0x1>
 9f2:	30 97       	sbiw	r30, 0x00	; 0
 9f4:	09 f0       	breq	.+2      	; 0x9f8 <__vector_15+0x30>
	{
		UART_TRANS_Fptr();	
 9f6:	09 95       	icall
	{
		/*do Nothing*/
	}

	
}
 9f8:	ff 91       	pop	r31
 9fa:	ef 91       	pop	r30
 9fc:	bf 91       	pop	r27
 9fe:	af 91       	pop	r26
 a00:	9f 91       	pop	r25
 a02:	8f 91       	pop	r24
 a04:	7f 91       	pop	r23
 a06:	6f 91       	pop	r22
 a08:	5f 91       	pop	r21
 a0a:	4f 91       	pop	r20
 a0c:	3f 91       	pop	r19
 a0e:	2f 91       	pop	r18
 a10:	0f 90       	pop	r0
 a12:	0f be       	out	0x3f, r0	; 63
 a14:	0f 90       	pop	r0
 a16:	1f 90       	pop	r1
 a18:	18 95       	reti

00000a1a <__vector_13>:


/*************************************************/
ISR(UART_RX_vect)
{
 a1a:	1f 92       	push	r1
 a1c:	0f 92       	push	r0
 a1e:	0f b6       	in	r0, 0x3f	; 63
 a20:	0f 92       	push	r0
 a22:	11 24       	eor	r1, r1
 a24:	2f 93       	push	r18
 a26:	3f 93       	push	r19
 a28:	4f 93       	push	r20
 a2a:	5f 93       	push	r21
 a2c:	6f 93       	push	r22
 a2e:	7f 93       	push	r23
 a30:	8f 93       	push	r24
 a32:	9f 93       	push	r25
 a34:	af 93       	push	r26
 a36:	bf 93       	push	r27
 a38:	ef 93       	push	r30
 a3a:	ff 93       	push	r31
	if (UART_RECE_Fptr!=NULL_PTR)
 a3c:	e0 91 4a 01 	lds	r30, 0x014A	; 0x80014a <UART_RECE_Fptr>
 a40:	f0 91 4b 01 	lds	r31, 0x014B	; 0x80014b <UART_RECE_Fptr+0x1>
 a44:	30 97       	sbiw	r30, 0x00	; 0
 a46:	09 f0       	breq	.+2      	; 0xa4a <__vector_13+0x30>
	{
		UART_RECE_Fptr();
 a48:	09 95       	icall
	else
	{
		/*do Nothing*/
	}

 a4a:	ff 91       	pop	r31
 a4c:	ef 91       	pop	r30
 a4e:	bf 91       	pop	r27
 a50:	af 91       	pop	r26
 a52:	9f 91       	pop	r25
 a54:	8f 91       	pop	r24
 a56:	7f 91       	pop	r23
 a58:	6f 91       	pop	r22
 a5a:	5f 91       	pop	r21
 a5c:	4f 91       	pop	r20
 a5e:	3f 91       	pop	r19
 a60:	2f 91       	pop	r18
 a62:	0f 90       	pop	r0
 a64:	0f be       	out	0x3f, r0	; 63
 a66:	0f 90       	pop	r0
 a68:	1f 90       	pop	r1
 a6a:	18 95       	reti

00000a6c <BCM_Dispatcher_Transmit_Handler>:
																			*/
	/************************************************************************/
uint8_t get_flag(void)
{
	return Status;
}
 a6c:	20 91 50 01 	lds	r18, 0x0150	; 0x800150 <ptr.2005>
 a70:	30 e0       	ldi	r19, 0x00	; 0
 a72:	f9 01       	movw	r30, r18
 a74:	ee 0f       	add	r30, r30
 a76:	ff 1f       	adc	r31, r31
 a78:	e6 54       	subi	r30, 0x46	; 70
 a7a:	fe 4f       	sbci	r31, 0xFE	; 254
 a7c:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <index.2006>
 a80:	01 90       	ld	r0, Z+
 a82:	f0 81       	ld	r31, Z
 a84:	e0 2d       	mov	r30, r0
 a86:	e8 0f       	add	r30, r24
 a88:	f1 1d       	adc	r31, r1
 a8a:	80 81       	ld	r24, Z
 a8c:	88 23       	and	r24, r24
 a8e:	41 f0       	breq	.+16     	; 0xaa0 <BCM_Dispatcher_Transmit_Handler+0x34>
 a90:	0e 94 ca 04 	call	0x994	; 0x994 <UART_transmit_NoBlock>
 a94:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <index.2006>
 a98:	8f 5f       	subi	r24, 0xFF	; 255
 a9a:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <index.2006>
 a9e:	08 95       	ret
 aa0:	22 0f       	add	r18, r18
 aa2:	33 1f       	adc	r19, r19
 aa4:	f9 01       	movw	r30, r18
 aa6:	e4 54       	subi	r30, 0x44	; 68
 aa8:	fe 4f       	sbci	r31, 0xFE	; 254
 aaa:	80 81       	ld	r24, Z
 aac:	91 81       	ldd	r25, Z+1	; 0x01
 aae:	89 2b       	or	r24, r25
 ab0:	d9 f0       	breq	.+54     	; 0xae8 <BCM_Dispatcher_Transmit_Handler+0x7c>
 ab2:	83 e2       	ldi	r24, 0x23	; 35
 ab4:	0e 94 ca 04 	call	0x994	; 0x994 <UART_transmit_NoBlock>
 ab8:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <index.2006>
 abc:	e0 91 50 01 	lds	r30, 0x0150	; 0x800150 <ptr.2005>
 ac0:	ef 5f       	subi	r30, 0xFF	; 255
 ac2:	e0 93 50 01 	sts	0x0150, r30	; 0x800150 <ptr.2005>
 ac6:	f0 e0       	ldi	r31, 0x00	; 0
 ac8:	ee 0f       	add	r30, r30
 aca:	ff 1f       	adc	r31, r31
 acc:	e6 54       	subi	r30, 0x46	; 70
 ace:	fe 4f       	sbci	r31, 0xFE	; 254
 ad0:	01 90       	ld	r0, Z+
 ad2:	f0 81       	ld	r31, Z
 ad4:	e0 2d       	mov	r30, r0
 ad6:	80 81       	ld	r24, Z
 ad8:	0e 94 ca 04 	call	0x994	; 0x994 <UART_transmit_NoBlock>
 adc:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <index.2006>
 ae0:	8f 5f       	subi	r24, 0xFF	; 255
 ae2:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <index.2006>
 ae6:	08 95       	ret
 ae8:	e0 91 20 02 	lds	r30, 0x0220	; 0x800220 <BCM_Send_Fptr>
 aec:	f0 91 21 02 	lds	r31, 0x0221	; 0x800221 <BCM_Send_Fptr+0x1>
 af0:	30 97       	sbiw	r30, 0x00	; 0
 af2:	09 f0       	breq	.+2      	; 0xaf6 <BCM_Dispatcher_Transmit_Handler+0x8a>
 af4:	09 95       	icall
 af6:	81 e0       	ldi	r24, 0x01	; 1
 af8:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <index.2006>
 afc:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <send_flag>
 b00:	83 e2       	ldi	r24, 0x23	; 35
 b02:	0e 94 ca 04 	call	0x994	; 0x994 <UART_transmit_NoBlock>
 b06:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <UART_TX_INTDISABLE>
 b0a:	08 95       	ret

00000b0c <BCM_Dispatcher_Receive_Handler>:
 b0c:	cf 93       	push	r28
 b0e:	df 93       	push	r29
 b10:	e0 91 4f 01 	lds	r30, 0x014F	; 0x80014f <ptr.2011>
 b14:	f0 e0       	ldi	r31, 0x00	; 0
 b16:	ee 0f       	add	r30, r30
 b18:	ff 1f       	adc	r31, r31
 b1a:	ea 5a       	subi	r30, 0xAA	; 170
 b1c:	fe 4f       	sbci	r31, 0xFE	; 254
 b1e:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <i.2010>
 b22:	c0 81       	ld	r28, Z
 b24:	d1 81       	ldd	r29, Z+1	; 0x01
 b26:	c8 0f       	add	r28, r24
 b28:	d1 1d       	adc	r29, r1
 b2a:	0e 94 cc 04 	call	0x998	; 0x998 <UART_receive_NoBlock>
 b2e:	88 83       	st	Y, r24
 b30:	e0 91 4f 01 	lds	r30, 0x014F	; 0x80014f <ptr.2011>
 b34:	8e 2f       	mov	r24, r30
 b36:	90 e0       	ldi	r25, 0x00	; 0
 b38:	20 91 4e 01 	lds	r18, 0x014E	; 0x80014e <i.2010>
 b3c:	dc 01       	movw	r26, r24
 b3e:	aa 0f       	add	r26, r26
 b40:	bb 1f       	adc	r27, r27
 b42:	aa 5a       	subi	r26, 0xAA	; 170
 b44:	be 4f       	sbci	r27, 0xFE	; 254
 b46:	0d 90       	ld	r0, X+
 b48:	bc 91       	ld	r27, X
 b4a:	a0 2d       	mov	r26, r0
 b4c:	a2 0f       	add	r26, r18
 b4e:	b1 1d       	adc	r27, r1
 b50:	3c 91       	ld	r19, X
 b52:	33 32       	cpi	r19, 0x23	; 35
 b54:	21 f0       	breq	.+8      	; 0xb5e <BCM_Dispatcher_Receive_Handler+0x52>
 b56:	2f 5f       	subi	r18, 0xFF	; 255
 b58:	20 93 4e 01 	sts	0x014E, r18	; 0x80014e <i.2010>
 b5c:	2d c0       	rjmp	.+90     	; 0xbb8 <BCM_Dispatcher_Receive_Handler+0xac>
 b5e:	88 0f       	add	r24, r24
 b60:	99 1f       	adc	r25, r25
 b62:	dc 01       	movw	r26, r24
 b64:	a8 5a       	subi	r26, 0xA8	; 168
 b66:	be 4f       	sbci	r27, 0xFE	; 254
 b68:	8d 91       	ld	r24, X+
 b6a:	9c 91       	ld	r25, X
 b6c:	89 2b       	or	r24, r25
 b6e:	a1 f0       	breq	.+40     	; 0xb98 <BCM_Dispatcher_Receive_Handler+0x8c>
 b70:	ef 5f       	subi	r30, 0xFF	; 255
 b72:	e0 93 4f 01 	sts	0x014F, r30	; 0x80014f <ptr.2011>
 b76:	f0 e0       	ldi	r31, 0x00	; 0
 b78:	ee 0f       	add	r30, r30
 b7a:	ff 1f       	adc	r31, r31
 b7c:	ea 5a       	subi	r30, 0xAA	; 170
 b7e:	fe 4f       	sbci	r31, 0xFE	; 254
 b80:	c0 81       	ld	r28, Z
 b82:	d1 81       	ldd	r29, Z+1	; 0x01
 b84:	81 e0       	ldi	r24, 0x01	; 1
 b86:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <i.2010>
 b8a:	0e 94 cc 04 	call	0x998	; 0x998 <UART_receive_NoBlock>
 b8e:	88 83       	st	Y, r24
 b90:	84 e0       	ldi	r24, 0x04	; 4
 b92:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <Status>
 b96:	10 c0       	rjmp	.+32     	; 0xbb8 <BCM_Dispatcher_Receive_Handler+0xac>
 b98:	e0 91 1e 02 	lds	r30, 0x021E	; 0x80021e <BCM_RECE_Fptr>
 b9c:	f0 91 1f 02 	lds	r31, 0x021F	; 0x80021f <BCM_RECE_Fptr+0x1>
 ba0:	30 97       	sbiw	r30, 0x00	; 0
 ba2:	09 f0       	breq	.+2      	; 0xba6 <BCM_Dispatcher_Receive_Handler+0x9a>
 ba4:	09 95       	icall
 ba6:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <i.2010>
 baa:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <rece_flag>
 bae:	84 e0       	ldi	r24, 0x04	; 4
 bb0:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <Status>
 bb4:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <UART_RX_INTDISABLE>
 bb8:	df 91       	pop	r29
 bba:	cf 91       	pop	r28
 bbc:	08 95       	ret

00000bbe <bcm_init>:
 bbe:	fc 01       	movw	r30, r24
 bc0:	80 81       	ld	r24, Z
 bc2:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <UART_init>
 bc6:	08 95       	ret

00000bc8 <bcm_send_n>:
 bc8:	cf 93       	push	r28
 bca:	df 93       	push	r29
 bcc:	9c 01       	movw	r18, r24
 bce:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <send_flag>
 bd2:	81 11       	cpse	r24, r1
 bd4:	21 c0       	rjmp	.+66     	; 0xc18 <bcm_send_n+0x50>
 bd6:	e9 01       	movw	r28, r18
 bd8:	0e 94 ce 04 	call	0x99c	; 0x99c <UART_TX_INTENABLE>
 bdc:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <i.1994>
 be0:	30 e0       	ldi	r19, 0x00	; 0
 be2:	f9 01       	movw	r30, r18
 be4:	ee 0f       	add	r30, r30
 be6:	ff 1f       	adc	r31, r31
 be8:	e6 54       	subi	r30, 0x46	; 70
 bea:	fe 4f       	sbci	r31, 0xFE	; 254
 bec:	d1 83       	std	Z+1, r29	; 0x01
 bee:	c0 83       	st	Z, r28
 bf0:	fe 01       	movw	r30, r28
 bf2:	e2 0f       	add	r30, r18
 bf4:	f3 1f       	adc	r31, r19
 bf6:	80 81       	ld	r24, Z
 bf8:	0e 94 ca 04 	call	0x994	; 0x994 <UART_transmit_NoBlock>
 bfc:	66 e3       	ldi	r22, 0x36	; 54
 bfe:	75 e0       	ldi	r23, 0x05	; 5
 c00:	80 e0       	ldi	r24, 0x00	; 0
 c02:	0e 94 d6 04 	call	0x9ac	; 0x9ac <UART_SetCallBack>
 c06:	81 e0       	ldi	r24, 0x01	; 1
 c08:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <send_flag>
 c0c:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <i.1994>
 c10:	8f 5f       	subi	r24, 0xFF	; 255
 c12:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <i.1994>
 c16:	0d c0       	rjmp	.+26     	; 0xc32 <bcm_send_n+0x6a>
 c18:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <i.1994>
 c1c:	e9 2f       	mov	r30, r25
 c1e:	f0 e0       	ldi	r31, 0x00	; 0
 c20:	ee 0f       	add	r30, r30
 c22:	ff 1f       	adc	r31, r31
 c24:	e6 54       	subi	r30, 0x46	; 70
 c26:	fe 4f       	sbci	r31, 0xFE	; 254
 c28:	31 83       	std	Z+1, r19	; 0x01
 c2a:	20 83       	st	Z, r18
 c2c:	9f 5f       	subi	r25, 0xFF	; 255
 c2e:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <i.1994>
 c32:	df 91       	pop	r29
 c34:	cf 91       	pop	r28
 c36:	08 95       	ret

00000c38 <bcm_receive>:
 c38:	cf 93       	push	r28
 c3a:	df 93       	push	r29
 c3c:	9c 01       	movw	r18, r24
 c3e:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <rece_flag>
 c42:	81 11       	cpse	r24, r1
 c44:	1c c0       	rjmp	.+56     	; 0xc7e <bcm_receive+0x46>
 c46:	e9 01       	movw	r28, r18
 c48:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <UART_RX_INTENABLE>
 c4c:	e0 91 51 01 	lds	r30, 0x0151	; 0x800151 <i.1998>
 c50:	f0 e0       	ldi	r31, 0x00	; 0
 c52:	ee 0f       	add	r30, r30
 c54:	ff 1f       	adc	r31, r31
 c56:	ea 5a       	subi	r30, 0xAA	; 170
 c58:	fe 4f       	sbci	r31, 0xFE	; 254
 c5a:	d1 83       	std	Z+1, r29	; 0x01
 c5c:	c0 83       	st	Z, r28
 c5e:	66 e8       	ldi	r22, 0x86	; 134
 c60:	75 e0       	ldi	r23, 0x05	; 5
 c62:	81 e0       	ldi	r24, 0x01	; 1
 c64:	0e 94 d6 04 	call	0x9ac	; 0x9ac <UART_SetCallBack>
 c68:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <rece_flag>
 c6c:	8f 5f       	subi	r24, 0xFF	; 255
 c6e:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <rece_flag>
 c72:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <i.1998>
 c76:	8f 5f       	subi	r24, 0xFF	; 255
 c78:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <i.1998>
 c7c:	0d c0       	rjmp	.+26     	; 0xc98 <bcm_receive+0x60>
 c7e:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <i.1998>
 c82:	e9 2f       	mov	r30, r25
 c84:	f0 e0       	ldi	r31, 0x00	; 0
 c86:	ee 0f       	add	r30, r30
 c88:	ff 1f       	adc	r31, r31
 c8a:	ea 5a       	subi	r30, 0xAA	; 170
 c8c:	fe 4f       	sbci	r31, 0xFE	; 254
 c8e:	31 83       	std	Z+1, r19	; 0x01
 c90:	20 83       	st	Z, r18
 c92:	9f 5f       	subi	r25, 0xFF	; 255
 c94:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <i.1998>
 c98:	df 91       	pop	r29
 c9a:	cf 91       	pop	r28
 c9c:	08 95       	ret

00000c9e <BCM_SetCallBack>:

/***********************************************************************************************************************************************/

void BCM_SetCallBack(enu_BCM_Callback_t enu_Callback,void(*FPTR_8)(void))
{
	if (enu_Callback==BCM_Send_t)
 c9e:	81 11       	cpse	r24, r1
 ca0:	05 c0       	rjmp	.+10     	; 0xcac <BCM_SetCallBack+0xe>
	{
		BCM_Send_Fptr=FPTR_8;
 ca2:	70 93 21 02 	sts	0x0221, r23	; 0x800221 <BCM_Send_Fptr+0x1>
 ca6:	60 93 20 02 	sts	0x0220, r22	; 0x800220 <BCM_Send_Fptr>
 caa:	08 95       	ret
	}
	else if (enu_Callback==BCM_Rece_t)
 cac:	81 30       	cpi	r24, 0x01	; 1
 cae:	21 f4       	brne	.+8      	; 0xcb8 <BCM_SetCallBack+0x1a>
	{
		BCM_RECE_Fptr=FPTR_8;
 cb0:	70 93 1f 02 	sts	0x021F, r23	; 0x80021f <BCM_RECE_Fptr+0x1>
 cb4:	60 93 1e 02 	sts	0x021E, r22	; 0x80021e <BCM_RECE_Fptr>
 cb8:	08 95       	ret

00000cba <_exit>:
 cba:	f8 94       	cli

00000cbc <__stop_program>:
 cbc:	ff cf       	rjmp	.-2      	; 0xcbc <__stop_program>
